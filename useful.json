//////////////////////

# Ubuntu

lsb_release - a

//////////////////////

# Python

Multicursor: Ctrl + Alt + (arrow up/down)

def()s and Modules worthwhile:

from collections import Counter
enumerate(alphabet)
zip(heros,alterego)

my_dic.items()
my_dic.get()

my_set.difference(other_set)

string.rindex(character)

xrange(a)
range(a)

arr.index() & arr.rindex()


def myFun(*args,**kwargs):
    print("args: ", args)
    print("kwargs: ", kwargs)
myFun('geeks','for','geeks',first="Geeks",mid="for",last="Geeks")


from collections import defaultdict
hash = defaultdict(int)
dic.setdefault(value, key)

from collections import deque
appendleft(), popleft()

q, mod = divmod(10,
3)
print(q, mod)
# 3 1

l = [None] * 10
l2 = [0] * 10
l3 = [0 for _ in range(len(10))]


from itertools import islice
v = range(10)

start = 3
for x, y in zip(v, islice(v, start, None)):
    print(x, y)

input = list(map(int, ((input()).strip().split())))
//////////////////////

# PostgreSQL

sudo service postgresql start
sudo -u postgres psql // Psql Shell

sudo su postgres
su - postgres // locked permanently
psql

create database sample01_april_db;

# \password postgres
CREATE USER mainengine WITH SUPERUSER PASSWORD '132525';
ALTER USER postgres WITH PASSWORD '1314';

---
Mac:[
    "To start postgresql:
    brew services start postgresql
    Or, if you don't want/need a background service you can just run:
    /opt/homebrew/opt/postgresql/bin/postgres -D /opt/homebrew/var/postgres"
]


//////////////////////

# Django SQLite to PostgreSQL

$ python3 manage.py dumpdata > data_backup.json
$ sudo apt update
$ sudo apt install pgadmin4 pgadmin4-apache2
$ pip3 install psycopg2

-- create DATABASE name NEW_DB

'ENGINE':'django.db.backends.postgresql_psycopg2'

$ python3 manage.py migrate
$ python3 manage.py migrate --run-syncdb

$ python3 manage.py loaddata data_backup.json




///////////////////////////////////
# Linux

sudo /etc/init.d/mysql start

sudo mysql
sudo mysql -u root
mysql -u root -p

# root

mysql> ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY 'your_new_password';
mysql> FLUSH PRIVILEGES;
mysql> quit

# Mac
To secure with password run:
$    mysql_secure_installation

To connect run:
$    mysql -uroot

$    mysql.server start

Background service you can just run:
$    brew services start mysql

create DATABASE IF NOT EXISTS name NEW_DB

---------------------------------------------------------

SELECT TOP 3 * FROM Customers;

SELECT * FROM Customers
LIMIT 3;

SELECT * FROM Customers
FETCH FIRST 3 ROWS ONLY;

SELECT TOP 50 PERCENT * FROM Customers;

SELECT * FROM Customers
FETCH FIRST 50 PERCENT ROWS ONLY;

---------------------------------------------------------

SELECT column, another_column, …
FROM mytable;
-
SELECT column, another_column, …
FROM mytable
WHERE column condition
    AND/OR another_condition
    IN/NOT IN 
    IS/IS NOT NULL …;
-
SELECT DISTINCT column, another_column, …
FROM mytable
WHERE condition(s);
ORDER BY column ASC/DESC;
LIMIT num_limit OFFSET num_offset;
-
SELECT AGG_FUNC(column_or_expression) AS aggregate_description, …
FROM mytable
WHERE constraint_expression
GROUP BY column;
-
SELECT group_by_column, AGG_FUNC(column_expression) AS aggregate_result_alias, …
FROM mytable
WHERE condition
GROUP BY column
HAVING group_condition;
-
SELECT column, another_column, …
FROM mytable
INNER/LEFT/RIGHT/FULL JOIN another_table 
    ON mytable.id = another_table.matching_id
WHERE condition(s)
ORDER BY column, … ASC/DESC
LIMIT num_limit OFFSET num_offset;
-
SELECT DISTINCT column, AGG_FUNC(column_or_expression), …
FROM mytable
    JOIN another_table
      ON mytable.column = another_table.column
    WHERE constraint_expression
    GROUP BY column
    HAVING constraint_expression
    ORDER BY column ASC/DESC
    LIMIT count OFFSET COUNT;

#Avoid OFFSET (Cost Inefficiency)
-
SELECT *, …
FROM mytable
WHERE column > < >= <=
    IN/NOT IN (SELECT another_column
               FROM another_table
               WHERE … );

---------------------------------------------------------

INSERT INTO mytable
(column, another_column, …)
VALUES (value_or_expr, another_value_or_expr, …),
      (value_or_expr_2, another_value_or_expr_2, …),
      …;
-
UPDATE mytable
SET column = value_or_expr, 
    other_column = another_value_or_expr, 
    …
WHERE condition;

e.g.
UPDATE Customers
SET ContactName = 'Alfred Schmidt', City= 'Frankfurt'
WHERE CustomerID = 1;
-
DELETE FROM mytable
WHERE condition;
-
CREATE TABLE IF NOT EXISTS mytable (
    column DataType TableConstraint DEFAULT default_value,
    another_column DataType TableConstraint DEFAULT default_value,
    …
);
-
TYPES"
INT, BOOLEAN, FLOAT, DOUBLE, REAL;
CHAR(num_chars), VARCHAR(num_chars), TEXT;
DATE, DATETIME;
BLOB;
"CONSTRAINS"
PRIMARY KEY, AUTOINCREMENT, UNIQUE, NOT NULL, CHECK, FOREIGN KEY;"
-
ALTER TABLE mytable
ADD column DataType OptionalTableConstraint 
    DEFAULT default_value;
-
DROP TABLE IF EXISTS mytable;
# Will Destroy ABSOLUTELY EVERYTHING.

---
Order of Execution:

1 FROM and JOIN s
2 WHERE
3 GROUP BY
4 HAVING
5 SELECT
6 DISTINCT
7 ORDER BY
8 LIMIT / OFFSET


